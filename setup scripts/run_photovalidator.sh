#!/bin/bash
# PhotoValidator Unix Launcher v2.0
# Enhanced cross-platform image processing pipeline
# Auto-generated by setup script

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

echo "==============================================="
echo "PhotoValidator - Image Processing Pipeline"
echo "Version 2.0 - Unix Launcher"
echo "==============================================="
echo

# Get script directory and change to it
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"
PROJECT_DIR="$(pwd)"

print_info "Project Directory: $PROJECT_DIR"
echo

# Check if Python is available
print_info "Checking Python installation..."
PYTHON_CMD=""

if command -v python3 &> /dev/null; then
    PYTHON_CMD="python3"
    PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')")
    print_status "Found Python3: $PYTHON_VERSION"
elif command -v python &> /dev/null; then
    PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')")
    # Check if it's Python 3
    MAJOR_VERSION=$(echo $PYTHON_VERSION | cut -d. -f1)
    if [ "$MAJOR_VERSION" = "3" ]; then
        PYTHON_CMD="python"
        print_status "Found Python3: $PYTHON_VERSION"
    else
        print_error "Found Python $PYTHON_VERSION, but Python 3.8+ is required"
        exit 1
    fi
else
    print_error "Python is not available"
    echo
    echo "Possible solutions:"
    echo "1. Install Python 3.8+ from your package manager:"
    echo "   Ubuntu/Debian: sudo apt install python3 python3-pip"
    echo "   CentOS/RHEL:   sudo yum install python3 python3-pip"
    echo "   macOS:         brew install python3"
    echo "2. Add Python to your PATH"
    exit 1
fi

# Validate Python version
MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)

if [ "$MAJOR" -lt 3 ] || ([ "$MAJOR" -eq 3 ] && [ "$MINOR" -lt 8 ]); then
    print_error "Python $PYTHON_VERSION found, but Python 3.8+ is required"
    echo "Please upgrade your Python installation"
    exit 1
fi

# Check if main script exists
if [ ! -f "main_optimized.py" ]; then
    print_error "main_optimized.py not found"
    echo "Current directory: $PROJECT_DIR"
    echo
    echo "Please ensure you're running this from the PhotoValidator directory"
    echo "Expected files:"
    echo "  - main_optimized.py"
    echo "  - requirements.txt"
    echo "  - photos4testing/ folder"
    exit 1
fi

print_status "Found main_optimized.py"

# Check if input folder exists
if [ ! -d "photos4testing" ]; then
    print_warning "photos4testing folder not found"
    print_info "Creating input folder..."
    mkdir -p "photos4testing"
    print_status "Created photos4testing folder"
fi

# Check if output folder exists
if [ ! -d "Results" ]; then
    print_info "Creating Results folder structure..."
    mkdir -p "Results/valid"
    mkdir -p "Results/invalid"
    mkdir -p "Results/manualreview"
    print_status "Created Results folder structure"
fi

# Display folder information
echo
print_info "Folder Status:"
echo "  Input folder:  photos4testing/"
echo "  Output folder: Results/"
echo "  - Valid images:     Results/valid/"
echo "  - Invalid images:   Results/invalid/"
echo "  - Manual review:    Results/manualreview/"

# Check for images in input folder
IMAGE_COUNT=$(find photos4testing -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.bmp" -o -iname "*.tiff" -o -iname "*.tif" -o -iname "*.webp" \) 2>/dev/null | wc -l)

echo
if [ "$IMAGE_COUNT" -eq 0 ]; then
    print_warning "No images found in photos4testing folder"
    echo "Please add images to process before running PhotoValidator"
    echo
    echo "Supported formats: JPG, PNG, TIFF, BMP, WebP"
    echo
    read -p "Do you want to continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Operation cancelled by user"
        exit 0
    fi
else
    print_status "Found $IMAGE_COUNT image(s) to process"
fi

# Check system resources
print_info "Checking system resources..."

# Check available memory
if command -v free &> /dev/null; then
    MEMORY_MB=$(free -m | awk 'NR==2{printf "%d", $7}')
    if [ "$MEMORY_MB" -lt 1000 ]; then
        print_warning "Low available memory: ${MEMORY_MB}MB"
        echo "  Consider closing other applications for better performance"
    else
        print_status "Available memory: ${MEMORY_MB}MB"
    fi
fi

# Check available disk space
DISK_SPACE=$(df -h . | awk 'NR==2 {print $4}')
print_status "Available disk space: $DISK_SPACE"

echo
echo "==============================================="
echo "Starting PhotoValidator..."
echo "==============================================="

# Run the main script with all passed arguments
set +e  # Don't exit on error for the main script
$PYTHON_CMD main_optimized.py "$@"
EXIT_CODE=$?
set -e  # Re-enable exit on error

echo
echo "==============================================="
echo "PhotoValidator Finished"
echo "==============================================="

# Check exit code and provide feedback
if [ $EXIT_CODE -eq 0 ]; then
    print_status "PhotoValidator completed successfully"
    echo
    echo "Results have been saved to:"
    echo "  - Valid images:     Results/valid/"
    echo "  - Invalid images:   Results/invalid/"
    echo "  - Manual review:    Results/manualreview/"
    echo
    echo "You can now review the processed images"
else
    print_error "PhotoValidator encountered an error (Exit Code: $EXIT_CODE)"
    echo
    echo "Common solutions:"
    echo "1. Check that all required packages are installed:"
    echo "   $PYTHON_CMD -m pip install -r requirements.txt"
    echo "2. Ensure input images are valid and readable"
    echo "3. Check available disk space and memory"
    echo "4. Run setup.py to reinstall dependencies:"
    echo "   $PYTHON_CMD setup.py"
    echo
    echo "For detailed error information, check the console output above"
fi

# Optional: Open results folder if available
if [ $EXIT_CODE -eq 0 ] && [ "$IMAGE_COUNT" -gt 0 ]; then
    echo
    read -p "Would you like to open the Results folder? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if command -v xdg-open &> /dev/null; then
            xdg-open Results/
        elif command -v open &> /dev/null; then
            open Results/
        else
            print_info "Results folder: $(pwd)/Results/"
        fi
    fi
fi

exit $EXIT_CODE
