@echo off
REM PhotoValidator Windows Launcher v2.0
REM Enhanced cross-platform image processing pipeline
REM Auto-generated by setup script

setlocal enabledelayedexpansion

echo ===============================================
echo PhotoValidator - Image Processing Pipeline
echo Version 2.0 - Windows Launcher
echo ===============================================
echo.

REM Change to script directory
cd /d "%~dp0"
set "PROJECT_DIR=%CD%"

REM Display current directory
echo Project Directory: %PROJECT_DIR%
echo.

REM Check if Python is available
echo Checking Python installation...
python --version >nul 2>&1
if errorlevel 1 (
    echo ERROR: Python is not available or not in PATH
    echo.
    echo Possible solutions:
    echo 1. Install Python 3.8+ from https://python.org
    echo 2. Add Python to your system PATH
    echo 3. Use 'py' command instead of 'python'
    echo.
    echo Trying 'py' command...
    py --version >nul 2>&1
    if errorlevel 1 (
        echo ERROR: Neither 'python' nor 'py' commands work
        echo Please install Python and try again
        goto :error_exit
    ) else (
        set "PYTHON_CMD=py"
        echo Found Python using 'py' command
    )
) else (
    set "PYTHON_CMD=python"
    echo Found Python using 'python' command
)

REM Display Python version
echo Python Version:
%PYTHON_CMD% --version

REM Check if main script exists
if not exist "main_optimized.py" (
    echo.
    echo ERROR: main_optimized.py not found
    echo Current directory: %PROJECT_DIR%
    echo.
    echo Please ensure you're running this from the PhotoValidator directory
    echo Expected files:
    echo   - main_optimized.py
    echo   - requirements.txt
    echo   - photos4testing\ folder
    goto :error_exit
)

REM Check if input folder exists
if not exist "photos4testing" (
    echo.
    echo WARNING: photos4testing folder not found
    echo Creating input folder...
    mkdir "photos4testing" 2>nul
    echo Created photos4testing folder
)

REM Check if output folder exists
if not exist "Results" (
    echo.
    echo Creating Results folder structure...
    mkdir "Results" 2>nul
    mkdir "Results\valid" 2>nul
    mkdir "Results\invalid" 2>nul
    mkdir "Results\manualreview" 2>nul
    echo Created Results folder structure
)

REM Display folder information
echo.
echo Folder Status:
echo   Input folder:  photos4testing\
echo   Output folder: Results\
echo   - Valid images:     Results\valid\
echo   - Invalid images:   Results\invalid\
echo   - Manual review:    Results\manualreview\

REM Check for images in input folder
set "IMAGE_COUNT=0"
for %%i in (photos4testing\*.jpg photos4testing\*.jpeg photos4testing\*.png photos4testing\*.bmp photos4testing\*.tiff photos4testing\*.tif photos4testing\*.webp) do (
    set /a IMAGE_COUNT+=1
)

echo.
if %IMAGE_COUNT%==0 (
    echo WARNING: No images found in photos4testing folder
    echo Please add images to process before running PhotoValidator
    echo.
    echo Supported formats: JPG, PNG, TIFF, BMP, WebP
    echo.
    echo Do you want to continue anyway? (Y/N)
    set /p "CONTINUE=Continue: "
    if /i not "!CONTINUE!"=="y" (
        echo Operation cancelled by user
        goto :normal_exit
    )
) else (
    echo Found %IMAGE_COUNT% image(s) to process
)

echo.
echo ===============================================
echo Starting PhotoValidator...
echo ===============================================

REM Run the main script with all passed arguments
%PYTHON_CMD% main_optimized.py %*
set "EXIT_CODE=%ERRORLEVEL%"

echo.
echo ===============================================
echo PhotoValidator Finished
echo ===============================================

REM Check exit code and provide feedback
if %EXIT_CODE%==0 (
    echo SUCCESS: PhotoValidator completed successfully
    echo.
    echo Results have been saved to:
    echo   - Valid images:     Results\valid\
    echo   - Invalid images:   Results\invalid\
    echo   - Manual review:    Results\manualreview\
    echo.
    echo You can now review the processed images
) else (
    echo ERROR: PhotoValidator encountered an error (Exit Code: %EXIT_CODE%^)
    echo.
    echo Common solutions:
    echo 1. Check that all required packages are installed
    echo 2. Ensure input images are valid and readable
    echo 3. Check available disk space
    echo 4. Run setup.py to reinstall dependencies
    echo.
    echo For detailed error information, check the console output above
)

:normal_exit
echo.
echo Press any key to close this window...
pause >nul
exit /b %EXIT_CODE%

:error_exit
echo.
echo Setup or validation failed. Please check the errors above.
echo.
echo If you need help:
echo 1. Run setup.py to install/repair the installation
echo 2. Check the README.md file for troubleshooting
echo 3. Ensure Python 3.8+ is properly installed
echo.
echo Press any key to close this window...
pause >nul
exit /b 1
